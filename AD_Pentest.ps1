param(
    [string]$Domain,
    [string]$Username,
    [string]$Password,
    [string]$OutputFile = "ad_pentest_results.txt"
)

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Test-ADConnection {
    try {
        $context = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, $Domain, $Username, $Password)
        if ($context.ValidateCredentials($Username, $Password)) {
            Write-ColorOutput "[+] Active Directory connection successful!" "Green"
            return $true
        } else {
            Write-ColorOutput "[-] Active Directory connection failed!" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "[-] Error connecting to AD: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Get-ADDomainInfo {
    try {
        $domainInfo = Get-ADDomain -Server $Domain
        $results = @{
            DomainName = $domainInfo.DNSRoot
            DomainSID = $domainInfo.DomainSID.Value
            DomainMode = $domainInfo.DomainMode
            ForestMode = $domainInfo.ForestMode
            DomainControllers = $domainInfo.ReplicaDirectoryServers
            InfrastructureMaster = $domainInfo.InfrastructureMaster
            PDCEmulator = $domainInfo.PDCEmulator
            RIDMaster = $domainInfo.RIDMaster
            SchemaMaster = $domainInfo.SchemaMaster
        }
        return $results
    } catch {
        Write-ColorOutput "[-] Error getting domain info: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADUsers {
    try {
        $users = Get-ADUser -Filter * -Properties * -Server $Domain | Select-Object SamAccountName, DisplayName, UserPrincipalName, Enabled, PasswordLastSet, LastLogonDate, LockedOut, PasswordExpired, PasswordNeverExpires, AccountExpirationDate, MemberOf, Description, Title, Department, Company, Office, Manager, DistinguishedName
        return $users
    } catch {
        Write-ColorOutput "[-] Error getting users: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADGroups {
    try {
        $groups = Get-ADGroup -Filter * -Properties * -Server $Domain | Select-Object Name, GroupCategory, GroupScope, Description, MemberCount, DistinguishedName, SID
        return $groups
    } catch {
        Write-ColorOutput "[-] Error getting groups: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADComputers {
    try {
        $computers = Get-ADComputer -Filter * -Properties * -Server $Domain | Select-Object Name, DNSHostName, OperatingSystem, OperatingSystemVersion, LastLogonDate, Enabled, DistinguishedName, SID
        return $computers
    } catch {
        Write-ColorOutput "[-] Error getting computers: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADGPOs {
    try {
        $gpos = Get-GPO -All -Domain $Domain | Select-Object DisplayName, ID, Owner, CreationTime, ModificationTime, GPOStatus, Description
        return $gpos
    } catch {
        Write-ColorOutput "[-] Error getting GPOs: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADTrusts {
    try {
        $trusts = Get-ADTrust -Filter * -Server $Domain | Select-Object Name, Direction, TrustType, TrustAttributes, Source, Target
        return $trusts
    } catch {
        Write-ColorOutput "[-] Error getting trusts: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-PrivilegedAccounts {
    try {
        $privilegedGroups = @("Domain Admins", "Enterprise Admins", "Schema Admins", "Account Operators", "Backup Operators", "Server Operators", "Print Operators")
        $privilegedUsers = @()
        
        foreach ($group in $privilegedGroups) {
            try {
                $members = Get-ADGroupMember -Identity $group -Server $Domain -Recursive
                foreach ($member in $members) {
                    $user = Get-ADUser -Identity $member.SamAccountName -Properties * -Server $Domain
                    $privilegedUsers += [PSCustomObject]@{
                        Username = $user.SamAccountName
                        DisplayName = $user.DisplayName
                        Group = $group
                        LastLogon = $user.LastLogonDate
                        PasswordLastSet = $user.PasswordLastSet
                        Enabled = $user.Enabled
                        LockedOut = $user.LockedOut
                    }
                }
            } catch {
                continue
            }
        }
        return $privilegedUsers
    } catch {
        Write-ColorOutput "[-] Error finding privileged accounts: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-ServiceAccounts {
    try {
        $serviceAccounts = Get-ADUser -Filter {ServicePrincipalName -like "*"} -Properties ServicePrincipalName, SamAccountName, DisplayName, Description, Enabled, PasswordLastSet, LastLogonDate -Server $Domain
        return $serviceAccounts
    } catch {
        Write-ColorOutput "[-] Error finding service accounts: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-UsersWithSPN {
    try {
        $spnUsers = Get-ADUser -Filter {ServicePrincipalName -like "*"} -Properties ServicePrincipalName, SamAccountName, DisplayName, Description, Enabled, PasswordLastSet, LastLogonDate -Server $Domain
        return $spnUsers
    } catch {
        Write-ColorOutput "[-] Error finding users with SPN: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-UsersWithDelegation {
    try {
        $delegationUsers = Get-ADUser -Filter {TrustedForDelegation -eq $true -or TrustedToAuthForDelegation -eq $true} -Properties TrustedForDelegation, TrustedToAuthForDelegation, SamAccountName, DisplayName, Description, Enabled -Server $Domain
        return $delegationUsers
    } catch {
        Write-ColorOutput "[-] Error finding users with delegation: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-UsersWithPreAuthNotRequired {
    try {
        $preAuthUsers = Get-ADUser -Filter {DoesNotRequirePreAuth -eq $true} -Properties DoesNotRequirePreAuth, SamAccountName, DisplayName, Description, Enabled -Server $Domain
        return $preAuthUsers
    } catch {
        Write-ColorOutput "[-] Error finding users with pre-auth not required: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-UsersWithPasswordNeverExpires {
    try {
        $neverExpireUsers = Get-ADUser -Filter {PasswordNeverExpires -eq $true} -Properties PasswordNeverExpires, SamAccountName, DisplayName, Description, Enabled, PasswordLastSet -Server $Domain
        return $neverExpireUsers
    } catch {
        Write-ColorOutput "[-] Error finding users with password never expires: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Find-UsersWithReversibleEncryption {
    try {
        $reversibleUsers = Get-ADUser -Filter {AllowReversiblePasswordEncryption -eq $true} -Properties AllowReversiblePasswordEncryption, SamAccountName, DisplayName, Description, Enabled -Server $Domain
        return $reversibleUsers
    } catch {
        Write-ColorOutput "[-] Error finding users with reversible encryption: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADPasswordPolicy {
    try {
        $domainPolicy = Get-ADDefaultDomainPasswordPolicy -Server $Domain
        return $domainPolicy
    } catch {
        Write-ColorOutput "[-] Error getting password policy: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Get-ADAccountLockoutPolicy {
    try {
        $lockoutPolicy = Get-ADDefaultDomainPasswordPolicy -Server $Domain
        return $lockoutPolicy
    } catch {
        Write-ColorOutput "[-] Error getting lockout policy: $($_.Exception.Message)" "Red"
        return $null
    }
}

function Export-Results {
    param([string]$OutputFile)
    
    try {
        $results = @{
            Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Domain = $Domain
            DomainInfo = Get-ADDomainInfo
            Users = Get-ADUsers
            Groups = Get-ADGroups
            Computers = Get-ADComputers
            GPOs = Get-ADGPOs
            Trusts = Get-ADTrusts
            PrivilegedAccounts = Find-PrivilegedAccounts
            ServiceAccounts = Find-ServiceAccounts
            SPNUsers = Find-UsersWithSPN
            DelegationUsers = Find-UsersWithDelegation
            PreAuthUsers = Find-UsersWithPreAuthNotRequired
            NeverExpireUsers = Find-UsersWithPasswordNeverExpires
            ReversibleUsers = Find-UsersWithReversibleEncryption
            PasswordPolicy = Get-ADPasswordPolicy
            LockoutPolicy = Get-ADAccountLockoutPolicy
        }
        
        $results | ConvertTo-Json -Depth 10 | Out-File -FilePath $OutputFile -Encoding UTF8
        Write-ColorOutput "[+] Results exported to: $OutputFile" "Green"
        
        $results | ConvertTo-Json -Depth 10 | Out-File -FilePath "ad_pentest_results.json" -Encoding UTF8
        Write-ColorOutput "[+] JSON results exported to: ad_pentest_results.json" "Green"
        
    } catch {
        Write-ColorOutput "[-] Error exporting results: $($_.Exception.Message)" "Red"
    }
}

function Show-Summary {
    Write-ColorOutput "`n=== XILLEN Active Directory Pentest Summary ===" "Cyan"
    Write-ColorOutput "Domain: $Domain" "Yellow"
    Write-ColorOutput "Username: $Username" "Yellow"
    Write-ColorOutput "Output File: $OutputFile" "Yellow"
    Write-ColorOutput "===============================================" "Cyan"
}

function Main {
    if (-not $Domain -or -not $Username -or -not $Password) {
        Write-ColorOutput "Usage: .\AD_Pentest.ps1 -Domain <domain> -Username <username> -Password <password> [-OutputFile <filename>]" "Yellow"
        Write-ColorOutput "Example: .\AD_Pentest.ps1 -Domain contoso.local -Username admin -Password P@ssw0rd" "Yellow"
        exit 1
    }
    
    Show-Summary
    
    if (Test-ADConnection) {
        Write-ColorOutput "`n[+] Starting Active Directory penetration testing..." "Green"
        
        Export-Results -OutputFile $OutputFile
        
        Write-ColorOutput "`n[+] Active Directory penetration testing completed!" "Green"
        Write-ColorOutput "[+] Check the output files for detailed results." "Green"
    } else {
        Write-ColorOutput "`n[-] Cannot proceed without valid AD connection." "Red"
        exit 1
    }
}

if ($MyInvocation.InvocationName -ne ".") {
    Main
}
